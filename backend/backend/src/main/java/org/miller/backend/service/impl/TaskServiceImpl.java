package org.miller.backend.service.impl;import org.miller.backend.model.Task;import org.miller.backend.repository.TaskRepository;import org.miller.backend.service.TaskService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;import java.util.Optional;import java.util.UUID;@Servicepublic class TaskServiceImpl implements TaskService {    @Autowired    private TaskRepository taskRepository;    @Override    public List<Task> getAllTasks() {        return taskRepository.findAll();    }    @Override    public Optional<Task> getTaskById(UUID id) {        return taskRepository.findById(id);    }    @Override    public Task createTask(Task task) {        task.setId(UUID.randomUUID());        task.setCreatedAt(LocalDateTime.now());        task.setUpdatedAt(LocalDateTime.now());        return taskRepository.save(task);    }    @Override    public Task updateTask(UUID id, Task taskDetails) {        return taskRepository.findById(id)                .map(task -> {                    task.setTitle(taskDetails.getTitle());                    task.setDescription(taskDetails.getDescription());                    task.setStatus(taskDetails.getStatus());                    task.setPriority(taskDetails.getPriority());                    task.setDueDate(taskDetails.getDueDate());                    task.setCreatedBy(taskDetails.getCreatedBy());                    task.setAssignedTo(taskDetails.getAssignedTo());                    task.setSpace(taskDetails.getSpace());                    task.setList(taskDetails.getList());                    task.setGoal(taskDetails.getGoal());                    task.setUpdatedAt(LocalDateTime.now());                    return taskRepository.save(task);                }).orElseThrow(() -> new RuntimeException("Task not found with id " + id));    }    @Override    public void deleteTask(UUID id) {        taskRepository.deleteById(id);    }    @Override    public List<Task> getTasksByCreatedBy(UUID createdByUserId) {        return taskRepository.findByCreatedBy_Id(createdByUserId);    }    @Override    public List<Task> getTasksByAssignedTo(UUID assignedToUserId) {        return taskRepository.findByAssignedTo_Id(assignedToUserId);    }    @Override    public List<Task> getTasksBySpaceId(UUID spaceId) {        return taskRepository.findBySpaceId(spaceId);    }    @Override    public List<Task> getTasksByListId(UUID listId) {        return taskRepository.findByListId(listId);    }    @Override    public List<Task> getTasksByGoalId(UUID goalId) {        return taskRepository.findByGoalId(goalId);    }    @Override    public List<Task> getTasksByStatus(String status) {        return taskRepository.findByStatus(status);    }    @Override    public List<Task> getTasksByPriority(String priority) {        return taskRepository.findByPriority(priority);    }}