package org.miller.backend.service.impl;import org.miller.backend.model.CommentMention;import org.miller.backend.repository.CommentMentionRepository;import org.miller.backend.service.CommentMentionService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;import java.util.UUID;@Servicepublic class CommentMentionServiceImpl implements CommentMentionService {    @Autowired    private CommentMentionRepository commentMentionRepository;    @Override    public List<CommentMention> getAllCommentMentions() {        return commentMentionRepository.findAll();    }    @Override    public Optional<CommentMention> getCommentMentionById(UUID id) {        return commentMentionRepository.findById(id);    }    @Override    public CommentMention createCommentMention(CommentMention commentMention) {        commentMention.setId(UUID.fromString(UUID.randomUUID().toString()));        return commentMentionRepository.save(commentMention);    }    @Override    public CommentMention updateCommentMention(UUID id, CommentMention commentMentionDetails) {        return commentMentionRepository.findById(id)                .map(commentMention -> {                    commentMention.setComment(commentMentionDetails.getComment());                    commentMention.setMentionedUser(commentMentionDetails.getMentionedUser());                    return commentMentionRepository.save(commentMention);                }).orElseThrow(() -> new RuntimeException("CommentMention not found with id " + id));    }    @Override    public void deleteCommentMention(UUID id) {        commentMentionRepository.deleteById(id);    }    @Override    public List<CommentMention> getCommentMentionsByCommentId(UUID commentId) {        return commentMentionRepository.findByCommentId(commentId);    }    @Override    public List<CommentMention> getCommentMentionsByMentionedUserId(UUID mentionedUserId) {        return commentMentionRepository.findByMentionedUserId(mentionedUserId);    }}