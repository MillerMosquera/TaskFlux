package org.miller.backend.controller;import org.miller.backend.model.TaskList;import org.miller.backend.service.TaskListService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/tasklists")public class TaskListController {    @Autowired    private TaskListService taskListService;    @GetMapping    public List<TaskList> getAllTaskLists() {        return taskListService.getAllTaskLists();    }    @GetMapping("/{id}")    public ResponseEntity<TaskList> getTaskListById(@PathVariable UUID id) {        return taskListService.getTaskListById(id)                .map(ResponseEntity::ok)                .orElse(ResponseEntity.notFound().build());    }    @PostMapping    public ResponseEntity<TaskList> createTaskList(@RequestBody TaskList taskList) {        TaskList createdTaskList = taskListService.createTaskList(taskList);        return new ResponseEntity<>(createdTaskList, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<TaskList> updateTaskList(@PathVariable UUID id, @RequestBody TaskList taskListDetails) {        try {            TaskList updatedTaskList = taskListService.updateTaskList(id, taskListDetails);            return ResponseEntity.ok(updatedTaskList);        } catch (RuntimeException e) {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteTaskList(@PathVariable UUID id) {        taskListService.deleteTaskList(id);        return ResponseEntity.noContent().build();    }    @GetMapping("/space/{spaceId}")    public List<TaskList> getTaskListsBySpaceId(@PathVariable UUID spaceId) {        return taskListService.getTaskListsBySpaceId(spaceId);    }    @GetMapping("/createdby/{createdByUserId}")    public List<TaskList> getTaskListsByCreatedBy(@PathVariable UUID createdByUserId) {        return taskListService.getTaskListsByCreatedBy(createdByUserId);    }}