package org.miller.backend.controller;import org.miller.backend.model.TaskDependency;import org.miller.backend.service.TaskDependencyService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/taskdependencies")public class TaskDependencyController {    @Autowired    private TaskDependencyService taskDependencyService;    @GetMapping    public List<TaskDependency> getAllTaskDependencies() {        return taskDependencyService.getAllTaskDependencies();    }    @GetMapping("/{id}")    public ResponseEntity<TaskDependency> getTaskDependencyById(@PathVariable UUID id) {        return taskDependencyService.getTaskDependencyById(id)                .map(ResponseEntity::ok)                .orElse(ResponseEntity.notFound().build());    }    @PostMapping    public ResponseEntity<TaskDependency> createTaskDependency(@RequestBody TaskDependency taskDependency) {        TaskDependency createdTaskDependency = taskDependencyService.createTaskDependency(taskDependency);        return new ResponseEntity<>(createdTaskDependency, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<TaskDependency> updateTaskDependency(@PathVariable UUID id, @RequestBody TaskDependency taskDependencyDetails) {        try {            TaskDependency updatedTaskDependency = taskDependencyService.updateTaskDependency(id, taskDependencyDetails);            return ResponseEntity.ok(updatedTaskDependency);        } catch (RuntimeException e) {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteTaskDependency(@PathVariable UUID id) {        taskDependencyService.deleteTaskDependency(id);        return ResponseEntity.noContent().build();    }    @GetMapping("/task/{taskId}")    public List<TaskDependency> getTaskDependenciesByTaskId(@PathVariable UUID taskId) {        return taskDependencyService.getTaskDependenciesByTaskId(taskId);    }    @GetMapping("/dependsontask/{dependsOnTaskId}")    public List<TaskDependency> getTaskDependenciesByDependsOnTaskId(@PathVariable UUID dependsOnTaskId) {        return taskDependencyService.getTaskDependenciesByDependsOnTaskId(dependsOnTaskId);    }}