package org.miller.backend.security.config;import org.miller.backend.security.jwt.JwtAuthenticationFilter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configuration@EnableWebSecuritypublic class SecurityConfig {    @Autowired    AuthenticationProvider authenticationProvider;    @Autowired    JwtAuthenticationFilter jwtAuthenticationFilter;    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http.csrf(csrf -> csrf.disable())                .authorizeHttpRequests(authorize -> authorize                        .requestMatchers(                                "/api/auth/**",                                "/v3/api-docs/**",                                "/swagger-ui/**",                                "/swagger-ui.html"                        ).permitAll()                        .anyRequest().authenticated())                .sessionManagement(session -> session                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))                .authenticationProvider(authenticationProvider)                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);        return http.build();    }}