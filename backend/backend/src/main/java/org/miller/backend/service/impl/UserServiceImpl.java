package org.miller.backend.service.impl;import org.miller.backend.model.User;import org.miller.backend.repository.UserRepository;import org.miller.backend.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;import java.util.Optional;import java.util.UUID;@Servicepublic class UserServiceImpl implements UserService {    @Autowired    private UserRepository userRepository;    @Override    public List<User> getAllUsers() {        return userRepository.findAll();    }    @Override    public Optional<User> getUserById(UUID id) {        return userRepository.findById(id);    }    @Override    public User createUser(User user) {        user.setId(UUID.randomUUID());        user.setCreatedAt(LocalDateTime.now());        user.setUpdatedAt(LocalDateTime.now());        return userRepository.save(user);    }    @Override    public User updateUser(UUID id, User userDetails) {        return userRepository.findById(id)                .map(user -> {                    user.setUsername(userDetails.getUsername());                    user.setEmail(userDetails.getEmail());                    user.setPasswordHash(userDetails.getPasswordHash());                    user.setUpdatedAt(LocalDateTime.now());                    return userRepository.save(user);                }).orElseThrow(() -> new RuntimeException("User not found with id " + id));    }    @Override    public void deleteUser(UUID id) {        userRepository.deleteById(id);    }    @Override    public Optional<User> getUserByUsername(String username) {        return userRepository.findByEmail(username);    }    @Override    public Optional<User> getUserByEmail(String email) {        return userRepository.findByEmail(email);    }}