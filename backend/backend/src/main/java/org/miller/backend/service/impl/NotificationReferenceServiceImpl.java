package org.miller.backend.service.impl;import org.miller.backend.model.NotificationReference;import org.miller.backend.repository.NotificationReferenceRepository;import org.miller.backend.service.NotificationReferenceService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;import java.util.UUID;@Servicepublic class NotificationReferenceServiceImpl implements NotificationReferenceService {    @Autowired    private NotificationReferenceRepository notificationReferenceRepository;    @Override    public List<NotificationReference> getAllNotificationReferences() {        return notificationReferenceRepository.findAll();    }    @Override    public Optional<NotificationReference> getNotificationReferenceById(UUID id) {        return notificationReferenceRepository.findById(id);    }    @Override    public NotificationReference createNotificationReference(NotificationReference notificationReference) {        notificationReference.setId(UUID.randomUUID());        return notificationReferenceRepository.save(notificationReference);    }    @Override    public NotificationReference updateNotificationReference(UUID id, NotificationReference notificationReferenceDetails) {        return notificationReferenceRepository.findById(id)                .map(notificationReference -> {                    notificationReference.setNotification(notificationReferenceDetails.getNotification());                    notificationReference.setReferencedEntityType(notificationReferenceDetails.getReferencedEntityType());                    notificationReference.setReferencedEntityId(notificationReferenceDetails.getReferencedEntityId());                    return notificationReferenceRepository.save(notificationReference);                }).orElseThrow(() -> new RuntimeException("NotificationReference not found with id " + id));    }    @Override    public void deleteNotificationReference(UUID id) {        notificationReferenceRepository.deleteById(id);    }    @Override    public List<NotificationReference> getNotificationReferencesByNotificationId(UUID notificationId) {        return notificationReferenceRepository.findByNotificationId(notificationId);    }    @Override    public List<NotificationReference> getNotificationReferencesByEntityTypeAndEntityId(String entityType, UUID referencedEntityId) {        return notificationReferenceRepository.findByReferencedEntityTypeAndReferencedEntityId(entityType, String.valueOf(referencedEntityId));    }}