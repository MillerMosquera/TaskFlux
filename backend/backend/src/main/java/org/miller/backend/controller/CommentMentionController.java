package org.miller.backend.controller;import org.miller.backend.model.CommentMention;import org.miller.backend.service.CommentMentionService;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/commentmentions")public class CommentMentionController {    private final CommentMentionService commentMentionService;    public CommentMentionController(CommentMentionService commentMentionService) {        this.commentMentionService = commentMentionService;    }    @GetMapping    public List<CommentMention> getAllCommentMentions() {        return commentMentionService.getAllCommentMentions();    }    @GetMapping("/{id}")    public ResponseEntity<CommentMention> getCommentMentionById(@PathVariable String id) {        try {            UUID uuid = UUID.fromString(id);            return commentMentionService.getCommentMentionById(uuid)                    .map(ResponseEntity::ok)                    .orElse(ResponseEntity.notFound().build());        } catch (IllegalArgumentException e) {            return ResponseEntity.badRequest().build();        }    }    @PostMapping    public ResponseEntity<CommentMention> createCommentMention(@RequestBody CommentMention commentMention) {        CommentMention createdCommentMention = commentMentionService.createCommentMention(commentMention);        return new ResponseEntity<>(createdCommentMention, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<CommentMention> updateCommentMention(@PathVariable UUID id, @RequestBody CommentMention commentMentionDetails) {        try {            CommentMention updatedCommentMention = commentMentionService.updateCommentMention(id, commentMentionDetails);            return ResponseEntity.ok(updatedCommentMention);        } catch (RuntimeException e) {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteCommentMention(@PathVariable UUID id) {        commentMentionService.deleteCommentMention(id);        return ResponseEntity.noContent().build();    }    @GetMapping("/comment/{commentId}")    public List<CommentMention> getCommentMentionsByCommentId(@PathVariable UUID commentId) {        return commentMentionService.getCommentMentionsByCommentId(commentId);    }    @GetMapping("/mentioneduser/{mentionedUserId}")    public List<CommentMention> getCommentMentionsByMentionedUserId(@PathVariable UUID mentionedUserId) {        return commentMentionService.getCommentMentionsByMentionedUserId(mentionedUserId);    }}