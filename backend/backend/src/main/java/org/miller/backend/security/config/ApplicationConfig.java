package org.miller.backend.security.config;import lombok.RequiredArgsConstructor;import org.miller.backend.repository.UserRepository;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.core.userdetails.User;import java.util.ArrayList;@Configuration@RequiredArgsConstructorpublic class ApplicationConfig {    private final UserRepository userRepository;    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {        return config.getAuthenticationManager();    }    @Bean    public AuthenticationProvider authenticationProvider() {        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();        provider.setUserDetailsService(userDetailsService());        provider.setPasswordEncoder(passwordEncoder());        return provider;    }    @Bean    public BCryptPasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Bean    public UserDetailsService userDetailsService() {        return username -> userRepository.findByEmail(username)                .map(user -> new User(                        user.getEmail(),                        user.getPasswordHash(),                        new ArrayList<>()))                .orElseThrow(() -> new UsernameNotFoundException("User not found"));    }}