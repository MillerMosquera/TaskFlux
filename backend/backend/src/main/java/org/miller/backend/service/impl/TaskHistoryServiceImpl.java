package org.miller.backend.service.impl;import org.miller.backend.model.TaskHistory;import org.miller.backend.repository.TaskHistoryRepository;import org.miller.backend.service.TaskHistoryService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;import java.util.Optional;import java.util.UUID;@Servicepublic class TaskHistoryServiceImpl implements TaskHistoryService {    @Autowired    private TaskHistoryRepository taskHistoryRepository;    @Override    public List<TaskHistory> getAllTaskHistoryEntries() {        return taskHistoryRepository.findAll();    }    @Override    public Optional<TaskHistory> getTaskHistoryById(UUID id) {        return taskHistoryRepository.findById(id);    }    @Override    public TaskHistory createTaskHistory(TaskHistory taskHistory) {        taskHistory.setId(UUID.randomUUID());        taskHistory.setCreatedAt(LocalDateTime.now());        return taskHistoryRepository.save(taskHistory);    }    @Override    public TaskHistory updateTaskHistory(UUID id, TaskHistory taskHistoryDetails) {        return taskHistoryRepository.findById(id)                .map(taskHistory -> {                    taskHistory.setTask(taskHistoryDetails.getTask());                    taskHistory.setUser(taskHistoryDetails.getUser());                    taskHistory.setAction(taskHistoryDetails.getAction());                    taskHistory.setDetails(taskHistoryDetails.getDetails());                    // CreatedAt is usually set on creation, but if you want to update it, uncomment below                    // taskHistory.setCreatedAt(taskHistoryDetails.getCreatedAt());                    return taskHistoryRepository.save(taskHistory);                }).orElseThrow(() -> new RuntimeException("TaskHistory not found with id " + id));    }    @Override    public void deleteTaskHistory(UUID id) {        taskHistoryRepository.deleteById(id);    }    @Override    public List<TaskHistory> getTaskHistoryByTaskId(UUID taskId) {        return taskHistoryRepository.findByTaskId(taskId);    }    @Override    public List<TaskHistory> getTaskHistoryByUserId(UUID userId) {        return taskHistoryRepository.findByUserId(userId);    }}