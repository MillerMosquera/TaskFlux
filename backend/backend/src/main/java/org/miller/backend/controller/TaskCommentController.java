package org.miller.backend.controller;import org.miller.backend.model.TaskComment;import org.miller.backend.service.TaskCommentService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/taskcomments")public class TaskCommentController {    @Autowired    private TaskCommentService taskCommentService;    @GetMapping    public List<TaskComment> getAllTaskComments() {        return taskCommentService.getAllTaskComments();    }    @GetMapping("/{id}")    public ResponseEntity<TaskComment> getTaskCommentById(@PathVariable UUID id) {        return taskCommentService.getTaskCommentById(id)                .map(ResponseEntity::ok)                .orElse(ResponseEntity.notFound().build());    }    @PostMapping    public ResponseEntity<TaskComment> createTaskComment(@RequestBody TaskComment taskComment) {        TaskComment createdTaskComment = taskCommentService.createTaskComment(taskComment);        return new ResponseEntity<>(createdTaskComment, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<TaskComment> updateTaskComment(@PathVariable UUID id, @RequestBody TaskComment taskCommentDetails) {        try {            TaskComment updatedTaskComment = taskCommentService.updateTaskComment(id, taskCommentDetails);            return ResponseEntity.ok(updatedTaskComment);        } catch (RuntimeException e) {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteTaskComment(@PathVariable UUID id) {        taskCommentService.deleteTaskComment(id);        return ResponseEntity.noContent().build();    }    @GetMapping("/task/{taskId}")    public List<TaskComment> getTaskCommentsByTaskId(@PathVariable UUID taskId) {        return taskCommentService.getTaskCommentsByTaskId(taskId);    }    @GetMapping("/user/{userId}")    public List<TaskComment> getTaskCommentsByUserId(@PathVariable UUID userId) {        return taskCommentService.getTaskCommentsByUserId(userId);    }}