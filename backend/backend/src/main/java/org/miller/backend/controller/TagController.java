package org.miller.backend.controller;import org.miller.backend.model.Tag;import org.miller.backend.service.TagService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/tags")public class TagController {    @Autowired    private TagService tagService;    @GetMapping    public List<Tag> getAllTags() {        return tagService.getAllTags();    }    @GetMapping("/{id}")    public ResponseEntity<Tag> getTagById(@PathVariable UUID id) {        return tagService.getTagById(id)                .map(ResponseEntity::ok)                .orElse(ResponseEntity.notFound().build());    }    @PostMapping    public ResponseEntity<Tag> createTag(@RequestBody Tag tag) {        Tag createdTag = tagService.createTag(tag);        return new ResponseEntity<>(createdTag, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<Tag> updateTag(@PathVariable UUID id, @RequestBody Tag tagDetails) {        try {            Tag updatedTag = tagService.updateTag(id, tagDetails);            return ResponseEntity.ok(updatedTag);        } catch (RuntimeException e) {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteTag(@PathVariable UUID id) {        tagService.deleteTag(id);        return ResponseEntity.noContent().build();    }    @GetMapping("/name/{name}")    public ResponseEntity<Tag> getTagByName(@PathVariable String name) {        return tagService.getTagByName(name)                .map(ResponseEntity::ok)                .orElse(ResponseEntity.notFound().build());    }}