package org.miller.backend.controller;import org.miller.backend.model.TimeEntry;import org.miller.backend.service.TimeEntryService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/timeentries")public class TimeEntryController {    @Autowired    private TimeEntryService timeEntryService;    @GetMapping    public List<TimeEntry> getAllTimeEntries() {        return timeEntryService.getAllTimeEntries();    }    @GetMapping("/{id}")    public ResponseEntity<TimeEntry> getTimeEntryById(@PathVariable UUID id) {        return timeEntryService.getTimeEntryById(id)                .map(ResponseEntity::ok)                .orElse(ResponseEntity.notFound().build());    }    @PostMapping    public ResponseEntity<TimeEntry> createTimeEntry(@RequestBody TimeEntry timeEntry) {        TimeEntry createdTimeEntry = timeEntryService.createTimeEntry(timeEntry);        return new ResponseEntity<>(createdTimeEntry, HttpStatus.CREATED);    }    @PutMapping("/{id}")    public ResponseEntity<TimeEntry> updateTimeEntry(@PathVariable UUID id, @RequestBody TimeEntry timeEntryDetails) {        try {            TimeEntry updatedTimeEntry = timeEntryService.updateTimeEntry(id, timeEntryDetails);            return ResponseEntity.ok(updatedTimeEntry);        } catch (RuntimeException e) {            return ResponseEntity.notFound().build();        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteTimeEntry(@PathVariable UUID id) {        timeEntryService.deleteTimeEntry(id);        return ResponseEntity.noContent().build();    }    @GetMapping("/task/{taskId}")    public List<TimeEntry> getTimeEntriesByTaskId(@PathVariable UUID taskId) {        return timeEntryService.getTimeEntriesByTaskId(taskId);    }    @GetMapping("/user/{userId}")    public List<TimeEntry> getTimeEntriesByUserId(@PathVariable UUID userId) {        return timeEntryService.getTimeEntriesByUserId(userId);    }}